IO = import "Io"
Range = import "Range"

parseLine line => [...line.stream().groupBySize(4).map(crate => [...crate].2)]

parseMove move => [...move.stream()
	.splitAt(" ")
	.map(x => x.toString())
	.groupBySize(2)
	.map(x => Number.parse(x.drop(1).toString()))]

parseStacks input => [...input.transpose().stream()
	.map(x => [...x.reverse().stream().drop(1).filter(y => y != " ")])]

performMove1([n, from, to], stacks) =>
	for i in Range(1, n): stacks.(to).append(stacks.(from).pop())

performMove2([n, from, to], stacks) => {
	stacks.(to) ++= stacks.(from).sub(#stacks.(from) - n + 1)
	stacks.(from) = stacks.(from).sub(1, #stacks.(from) - n)
}

input = IO.stdin.splitAt("\n", true)
	.map(x => x.toString())
	.group(x => #x != 0)

stacks = parseStacks [...input.read().map(parseLine)]

input.read()
	.map(parseMove)
	.forAll(move => performMove2(move, stacks))

tops = stacks.stream().map(stack => stack.(#stack))

yield tops.toString()

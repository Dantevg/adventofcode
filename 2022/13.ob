IO = import "Io"

parsePacket(line) => {
	var [char, next] = line.read()
	if char == "[": {
		const list = []
		while char != "]" and char != nil: {
			const item = parsePacket(line)
			if item != nil: list.append(item)
			[char, next] = line.read()
		}
		return list
	} else if char != nil: {
		if next == "," or next == "]": return Number.parse(char)
		else return Number.parse(char ++ line.takeWhile(c => c.2 != "," and c.2 != "]", true).map(x => x.1).toString())
	}
	return nil
}

compare(a, b) =>
	if a.is Number and b.is Number: (if a != b: a < b else nil)
	else if a.is List and b.is List: {
		for _, i in a: {
			const cmp = compare(a.(i), b.(i))
			if cmp.is Boolean: return cmp
		}
		return compare(#a, #b)
	}
	else if a.is Number: compare([a], b)
	else if b.is Number: compare(a, [b])

yield IO.stdin
	.splitAt "\n"
	.map(line => line.windowed 2)
	.map(parsePacket)
	.groupBySize 2
	.map((x, i) => [x, i])
	.filter([pair, i] => compare(...pair))
	.reduce((acc, [_, i]) => acc + i, 0)

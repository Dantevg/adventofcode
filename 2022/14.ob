IO = import "Io"

Vec = {
	"()" (x, y) => this.clone { const x, y = x, y }
	"==" that => this.x == that.x and this.y == that.y
	toString() => "(" ++ this.x ++ "," ++ this.y ++ ")"
}

Field = {
	"()" rocks => this.clone {
		const points = {}
		var maxY = 0
		for path in rocks: path.stream()
			.forEach(point => { maxY = Number.max(maxY, point.y) })
			.windowed(2).map(x => [...x])
			.forAll([from, to] => {
				for x in Number.min(from.x, to.x)..Number.max(from.x, to.x): {
					for y in Number.min(from.y, to.y)..Number.max(from.y, to.y):
						points.("("++x++","++y++")") = true
				}
			})
	}
	
	addSand() => {
		var x, y = 500, 0
		while y <= this.maxY: {
			if !this.points.("("++x++","++y+1++")"): x, y = x, y+1
			else if !this.points.("("++x-1++","++y+1++")"): x, y = x-1, y+1
			else if !this.points.("("++x+1++","++y+1++")"): x, y = x+1, y+1
			else break
		}
		if x == 500: print("("++x++","++y++")")
		this.points.("("++x++","++y++")") = true
	}
}

parsePoint p => Vec(...p.stream()
	.splitAt ","
	.map(x => x.toString())
	.map(Number.parse))

parsePath line => line.splitAt " "
	.map(x => x.toString())
	.filter(x => x != "->")
	.map(parsePoint)
	.toList()

field = Field [...IO.stdin.splitAt "\n".map parsePath]

var i = 0
while !field.points."(500,0)": {
	field.addSand()
	i = i+1
}

yield i

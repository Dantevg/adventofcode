IO = import "Io"

tree = {}
currentPath = []

treeAtPath(path) => {
	var newtree = tree
	for part in path: newtree = newtree.(part)
	return newtree
}

parseCommand line => {
	[command, newpath] = [...line.splitAt(" ").drop(1).map(x => x.toString())]
	if command != "cd": return nil
	if newpath == "/": currentPath = []
	else if newpath == "..": currentPath = currentPath.sub(1, #currentPath-1)
	else currentPath.append(newpath)
}

parseOutput line => {
	[typeOrSize, name] = [...line.splitAt(" ").map(x => x.toString())]
	treeAtPath(currentPath).(name) = if typeOrSize == "dir": {} else Number.parse(typeOrSize)
}

for line in IO.stdin.splitAt("\n").map(x => x.toString()): {
	if line.1 == "$": parseCommand(line.stream())
	else parseOutput(line.stream())
}

var smallSize = 0

calcDirSize(tree) => {
	if tree.size: return tree.size
	var size = 0
	for key in tree.keys(): {
		if tree.(key).is Number: size += tree.(key)
		else size += calcDirSize(tree.(key))
	}
	if size < 100000: smallSize += size
	tree.size = size
	return size
}

calcSmallestToRemove(tree, smallest, minSize) => {
	for key in tree.keys(): {
		if tree.(key).is Number: {
			if tree.size < smallest and tree.size > minSize: smallest = tree.size
		}
		else smallest = calcSmallestToRemove(tree.(key), smallest, minSize)
	}
	return smallest
}

calcDirSize(tree)

f1() => smallSize
f2() => {
	const minSize = 30000000 - (70000000 - tree.size)
	return calcSmallestToRemove(tree, tree.size, minSize)
}

yield f2()

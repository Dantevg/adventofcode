IO = import "Io"

parseValve line => {
	_valve, _tunnel = ...line.splitAt(";")
	const name = _valve.splitAt(" ").drop(1).read().toString()
	const rate = _valve.splitAt(" ").drop(2).read().splitAt("=").drop(1).read().toString() |> Number.parse
	const tunnels = _tunnel.splitAt(",")
		.map(x => x.toString())
		.map(x => x.sub(#x-1))
		.toBlock(x => (x, 1))
	_valve, _tunnel = ()
}

valves = IO.stdin.splitAt("\n").map(parseValve).toBlock(x => (x.name, x))

dist(from, to) => valves.(from).tunnels.(to) or Number.INF

for k in valves.keys(): {
	for i in valves.keys(): {
		for j in valves.keys(): {
			valves.(i).tunnels.(j) = Number.min(dist(i, j), dist(i, k) + dist(k, j))
		}
	}
}

valves = valves.keys().stream()
	.filter(v => valves.(v).rate > 0 or v == "AA")
	.toBlock(v => (v, valves.(v)))

for v in valves.keys(): {
	for t in valves.(v).tunnels.keys(): {
		if valves.(t) == nil: valves.(v).tunnels.(t) = nil
	}
}

pairDist(from, to) => dist(from.1.name, to.1) + dist(from.2.name, to.2)

tunnelCombos(valve, visited, time) => {
	t1 = valve.1.tunnels.keys().stream().filter(v => visited.(v) == nil and dist(valve.1.name, v) < time.1 - 1)
	t2 = [...valve.2.tunnels.keys().stream().filter(v => visited.(v) == nil and dist(valve.2.name, v) < time.2 - 1)]
	return t1.map((v1, i) => t2.stream().filter(v2 => v1 != v2).map(v2 => [v1, v2])).flat()
}

search(valve, visited, time) =>
	if time.1 <= 0 and time.2 <= 0: 0
	else if time.1 <= 0 and time.2 == 1: valve.2.rate
	else if time.1 == 1 and time.2 <= 0: valve.1.rate
	else valve.1.rate * time.1 + valve.2.rate * time.2
		+ (tunnelCombos(valve, visited, time)
			.map(v => search(
				[valves.(v.1), valves.(v.2)],
				visited.clone {.(v.1) = true; .(v.2) = true},
				[time.1 - dist(valve.1.name, v.1) - 1, time.2 - dist(valve.2.name, v.2) - 1]))
			.max() or 0)

yield search([valves.AA, valves.AA], {AA = true}, [26, 26])

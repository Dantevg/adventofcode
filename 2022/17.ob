IO = import "Io"

Rock = {
	width() => #this.bottom
	
	canFall(field, x, y) => field.stream()
		.drop(x-1).take(this.width())
		.zipWith(this.bottom.stream())
		.map([stack, bottom] => y + bottom - #stack)
		.all(x => x > 0)
	
	move(field, x, y, dir) => x
	
	place(field, x, y) =>
		field.sub(1, x-1)
		++ field.sub(x, x + this.width() - 1).stream()
			.zipWith(this.top.stream())
			.map([height, top] => height + top)
			.toList()
		++ field.sub(x + this.width())
}

rocks = [
	Rock.clone { -- Horizontal line
		top    = [1,1,1,1] -- ████████
		bottom = [0,0,0,0]
		left   = [0]
		right  = [4]
	}
	Rock.clone { -- Plus
		top    = [2,3,2]   --   ██
		bottom = [1,0,1]   -- ██████
		left   = [1,0,1]   --   ██
		right  = [2,3,2]
	}
	Rock.clone { -- Inverted L
		top    = [1,1,3]   --     ██
		bottom = [0,0,0]   --     ██
		left   = [2,2,0]   -- ██████
		right  = [3,3,3]
	}
	Rock.clone { -- Vertical line
		top    = [4]       -- ██
		bottom = [0]       -- ██
		left   = [0,0,0,0] -- ██
		right  = [1,1,1,1] -- ██
	}
	Rock.clone { -- Block
		top    = [2,2]     -- ████
		bottom = [0,0]     -- ████
		left   = [0,0]
		right  = [2,2]
	}
]

jets = IO.stdin.mapIndex {"<" = -1; ">" = 1}.repeat()

f1() => rocks.stream().repeat()
	.take(10)
	.reduce((field, rock) => {
		var x, y = 3, field.stream().map(x => #x).max() + 4
		x = rock.move(field, x, y, jets.read())
		while rock.canFall(field, x, y): {
			x, y = rock.move(field, x, y, jets.read()), y-1
		}
		return rock.place(field, x, y)
	}, [[], [], [], [], [], [], []])

yield f1()
